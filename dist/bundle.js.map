{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;ACAuC;AACF;AACM;AACJ;;AAEvC;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,iBAAiB,4CAAM;AACvB,iBAAiB,2CAAK;AACtB,iBAAiB,4CAAM;AACvB,iBAAiB,8CAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO,YAAY,MAAM;AAC/D;AACA,0EAA0E,2BAA2B,+CAA+C;AACpJ;AACA,2DAA2D;AAC3D;AACA,+DAA+D,2BAA2B;AAC1F;AACA;AACA,2DAA2D;AAC3D;AACA,+DAA+D,2BAA2B;AAC1F;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;;AAEA;AACA,4CAA4C,OAAO;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9EiC;AACO;;AAExC;;AAEO;AACP;AACA;AACA;AACA;;AAEA,qBAAqB,0CAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,oDAAS;AACb;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ,GAAG,QAAQ;AACxD;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrI6D;AAC7D,mBAAO,CAAC,8CAAkB;AACF;AACc;AACH;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yCAAM;AACpB,eAAe,0CAAQ;AACvB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;;AAEA,YAAY,0EAAe;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D,qDAAqD,WAAW;AAChE;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCpIA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;UElBA;UACA;UACA;UACA","sources":["webpack://cardgame/./src/css/styles.css?e4b0","webpack://cardgame/./src/components/deck.js","webpack://cardgame/./src/components/memoryGame.js","webpack://cardgame/./src/index.js","webpack://cardgame/webpack/bootstrap","webpack://cardgame/webpack/runtime/define property getters","webpack://cardgame/webpack/runtime/global","webpack://cardgame/webpack/runtime/hasOwnProperty shorthand","webpack://cardgame/webpack/runtime/make namespace object","webpack://cardgame/webpack/runtime/publicPath","webpack://cardgame/webpack/before-startup","webpack://cardgame/webpack/startup","webpack://cardgame/webpack/after-startup"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import spades from '../img/spades.svg';\nimport clubs from '../img/clubs.svg';\nimport diamonds from '../img/diamonds.svg';\nimport hearts from '../img/hearts.svg';\n\n// const suitsBackground = {\n//     '♠': spades,\n//     '♣': clubs,\n//     '♥': hearts,\n//     '♦': diamonds,\n// };\n\nexport class Deck {\n    constructor() {\n        this.SUITS = ['♠', '♣', '♥', '♦'];\n        this.VALUES = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\n        this.suitsBackground = {\n            '♠': spades,\n            '♣': clubs,\n            '♥': hearts,\n            '♦': diamonds,\n        };\n        this.cards = this.VALUES.reduce((result, value) => {\n            for (let suit of this.SUITS) {\n                result.push({\n                    value: value,\n                    suit: suit,\n                    html: `\n                    <div data-value=${value} data-suit=${suit} class=\"card\" >\n                        <div class=\"card__back\"></div>\n                        <div class=\"card__face\" style=\"background: url('${this.suitsBackground[suit]}') center center no-repeat, rgb(255, 255, 255);\">\n                            <div class=\"card__top\">    \n                                <div class=\"card__value\">${value}\n                                </div>\n                                <img class=\"card__suit\" src=\"${this.suitsBackground[suit]}\" alt=\"suit\">\n                            </div>\n                            <div class=\"card__bottom\">    \n                                <div class=\"card__value\">${value}\n                                </div>\n                                <img class=\"card__suit\" src=\"${this.suitsBackground[suit]}\" alt=\"suit\">\n                            </div>\n                        </div>\n                    </div>\n                    `,\n                });\n            }\n            return result;\n        }, []);\n    }\n\n    shuffle() {\n        for (let i = this.cards.length - 1; i > 0; i--) {\n            const newIndex = Math.floor(Math.random() * (i + 1));\n\n            [this.cards[i], this.cards[newIndex]] = [\n                this.cards[newIndex],\n                this.cards[i],\n            ];\n        }\n        return this;\n    }\n\n    cut(length = 3) {\n        this.cards = this.cards.slice(0, length);\n        return this;\n    }\n\n    double() {\n        this.cards = [this.cards, ...this.cards].flat();\n        return this;\n    }\n\n    render(element = document.body) {\n        for (let card of this.cards) {\n            element.innerHTML = element.innerHTML += card.html;\n        }\n        return this;\n    }\n}\n","import { Deck } from './deck.js';\nimport { renderApp } from '../index.js';\n\nlet countOpenedCards = 0;\n\nexport function renderGameField(difficulty = 1) {\n    const gameField = document.querySelector('.game__field');\n    clearInterval(window.cardGame.timerInterval);\n    clearInterval(window.cardGame.countdownInterval);\n    clearTimeout(window.cardGame.flipTimeout);\n\n    const deck = new Deck();\n    const cardPresets = [3, 3, 6, 9];\n    window.cardGame.currentDeck = deck\n        .shuffle()\n        .cut(cardPresets[+difficulty])\n        .double()\n        .shuffle()\n        .render(gameField);\n    console.log(deck);\n    window.cardGame.flipTimeout = setTimeout(() => {\n        flipCards();\n        addCardListener();\n    }, 5000);\n    countdown();\n}\n\nfunction addCardListener() {\n    const cards = document.body.querySelectorAll('.card');\n    const resetCard = () => {\n        return { value: 0, suit: 0 };\n    };\n\n    for (let card of cards) {\n        card.addEventListener('click', compareCards);\n    }\n\n    function compareCards(event) {\n        const card = event.srcElement.closest('.card');\n        const face = card.querySelector('.card__face');\n        const back = card.querySelector('.card__back');\n\n        face.classList.add('card__flip-face1');\n        back.classList.add('card__flip-back1');\n\n        setTimeout(checkConditions, 800);\n\n        function checkConditions() {\n            if (!window.cardGame.firstCard.value) {\n                window.cardGame.firstCard = {\n                    value: card.dataset.value,\n                    suit: card.dataset.suit,\n                };\n                countOpenedCards++;\n                card.removeEventListener('click', compareCards);\n            } else {\n                window.cardGame.secondCard = {\n                    value: card.dataset.value,\n                    suit: card.dataset.suit,\n                };\n                countOpenedCards++;\n                card.removeEventListener('click', compareCards);\n                // Условие проигрыша\n                if (\n                    window.cardGame.firstCard.value !==\n                        window.cardGame.secondCard.value ||\n                    window.cardGame.firstCard.suit !==\n                        window.cardGame.secondCard.suit\n                ) {\n                    checkAndDisplayResult('проиграли');\n                }\n                window.cardGame.firstCard = resetCard();\n                window.cardGame.secondCard = resetCard();\n            }\n            // Условие выигрыша\n            if (countOpenedCards === window.cardGame.currentDeck.cards.length) {\n                checkAndDisplayResult('выиграли');\n            }\n        }\n    }\n}\n\nfunction checkAndDisplayResult(result) {\n    clearInterval(window.cardGame.timerInterval);\n    countOpenedCards = 0;\n    const timerValue = document.querySelector('.game__digits').textContent;\n    window.cardGame.status = 'result';\n    renderApp(window.cardGame.status, timerValue, result);\n}\n\nfunction flipCards() {\n    const cards = document.body.querySelectorAll('.card');\n\n    for (let card of cards) {\n        const face = card.querySelector('.card__face');\n        const back = card.querySelector('.card__back');\n\n        face.classList.add('card__flip-face');\n        back.classList.add('card__flip-back');\n    }\n}\n\nfunction countdown() {\n    const timer = document.querySelector('.game__timer');\n    const countdownEl = document.createElement('div');\n    countdownEl.classList.add('game__countdown');\n    countdownEl.textContent = '5';\n    timer.after(countdownEl);\n\n    window.cardGame.countdownInterval = setInterval(() => {\n        if (countdownEl.textContent > 1) {\n            countdownEl.textContent -= 1;\n        } else {\n            clearInterval(window.cardGame.countdownInterval);\n            countdownEl.textContent = 'Start';\n            setTimeout(() => (countdownEl.textContent = ''), 1000);\n            startTimer();\n        }\n    }, 1000);\n}\n\nfunction startTimer() {\n    const timerDigits = document.querySelector('.game__digits');\n    let time = 0;\n\n    function setTime() {\n        time += 1;\n        const minutes = ('00' + Math.round(time / 60)).slice(-2);\n        const seconds = ('00' + (time % 60)).slice(-2);\n        timerDigits.textContent = `${minutes}.${seconds}`;\n    }\n    window.cardGame.timerInterval = setInterval(setTime, 1000);\n    setTimeout(clearInterval, 600000, window.cardGame.timerInterval);\n}\n","import { renderGameField } from './components/memoryGame.js';\nrequire('./css/styles.css');\nimport './img/back.png';\nimport looseImg from './img/lose.png';\nimport winImg from './img/win.png';\n\nwindow.cardGame = {};\nwindow.cardGame.firstCard = {\n    value: 0,\n    suit: 0,\n};\nwindow.cardGame.secondCard = {\n    value: 0,\n    suit: 0,\n};\nconst appElem = document.querySelector('.main_page');\nconst winOrLooseUrl = {\n    выиграли: winImg,\n    проиграли: looseImg,\n};\n\nexport function renderApp(mode = 0, timerValue = 0, resultWord) {\n    switch (mode) {\n        default:\n            appElem.innerHTML = `\n                <div class=\"difficulty\">\n                    <h1 class=\"difficulty__heading\">Выбери<br>сложность</h1>\n                    <div class=\"difficulty__selection\">\n                        <button class=\"difficulty__selection-item\">1</button>\n                        <button class=\"difficulty__selection-item\">2</button>\n                        <button class=\"difficulty__selection-item\">3</button>\n                    </div>\n                    <button class=\"btn start-button\">Старт</button>\n                </div>\n            `;\n            break;\n\n        case 'game':\n            appElem.style.flexDirection = 'column';\n            appElem.innerHTML = `\n            <div class=\"game\">\n                <div class=\"game__header\">\n                    <div class=\"game__timer\">\n                        <div class=\"game__min-sec\">min</div>\n                        <div class=\"game__min-sec\">sec</div>\n                        <div class=\"game__digits\">00.00</div>\n                    </div>\n                    <button class=\"btn again_btn\">Начать заново</button>\n                </div>\n                <div class=\"game__field\">\n                </div>\n            </div>\n            <p>Сложность ${window.cardGame.difficulty}</p>\n            <button class=\"btn back_btn\">Назад</button>\n            `;\n\n            renderGameField(window.cardGame.difficulty);\n            break;\n\n        case 'result':\n            appElem.innerHTML =\n                appElem.innerHTML +\n                `<div class=\"shadow\"></div>\n                <div class=\"difficulty result\">\n                    <img src=\"${winOrLooseUrl[resultWord]}\" alt=\"result\" class=\"result__img\">\n                    <h1 class=\"result__heading\">Вы ${resultWord}!</h1>\n                    <p class=\"result__text\">Затраченное время:</p>\n                    <p class=\"result__time\">${timerValue}</p>\n                    <button class=\"btn result__again-btn\">Играть снова</button>\n                </div>\n                `;\n            break;\n    }\n    addListenerOnApp();\n}\n// Делегирую события на один листенер\nfunction addListenerOnApp() {\n    appElem.addEventListener('click', (event) => {\n        const difficultyButtons = appElem.querySelectorAll(\n            '.difficulty__selection-item'\n        );\n        const startBtn = appElem.querySelector('.start-button');\n        const backBtn = appElem.querySelector('.back_btn');\n        const againBtn = appElem.querySelector('.again_btn');\n        const resultAgainBtn = appElem.querySelector('.result__again-btn');\n\n        switch (true) {\n            // Кнопки на сложность\n            case event.target.classList.contains('difficulty__selection-item'):\n                window.cardGame.difficulty = '1';\n\n                for (let button of difficultyButtons) {\n                    button.addEventListener('click', () => {\n                        difficultyButtons.forEach((el) =>\n                            el.classList.remove(\n                                'difficulty__selection-item_checked'\n                            )\n                        );\n                    });\n                }\n\n                event.target.classList.add(\n                    'difficulty__selection-item_checked'\n                );\n                window.cardGame.difficulty = event.target.textContent;\n                break;\n            // Кнопка старт\n            case event.target === startBtn:\n                window.cardGame.status = 'game';\n                renderApp(window.cardGame.status);\n                break;\n            // Кнопка назад\n            case event.target === backBtn:\n                window.cardGame.status = null;\n                renderApp(window.cardGame.status);\n                break;\n            // Кнопка начать заново\n            case event.target === againBtn:\n                window.cardGame.firstCard = {\n                    value: 0,\n                    suit: 0,\n                };\n                renderApp(window.cardGame.status);\n                break;\n            // Кнопка начать заново на результате игры\n            case event.target === resultAgainBtn:\n                window.cardGame.status = null;\n                renderApp(window.cardGame.status);\n        }\n    });\n}\n\nrenderApp(window.cardGame.status);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n",""],"names":[],"sourceRoot":""}